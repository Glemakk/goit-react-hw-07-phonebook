{"version":3,"sources":["redux/contacts/contactsActions.js","redux/contacts/contactsReducer.js","redux/store/phoneBook-store.js","redux/actions/item.js","components/Button/Button.styled.jsx","components/Button/Button.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","redux/contacts/contacts-selectors.js","services/contacts-api.js","redux/contacts/contactsOperations.js","components/ContactList/ContactList.styled.jsx","components/IconButton/IconButton.styled.jsx","components/IconButton/IconButton.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Container/Container.styled.jsx","components/Container/Container.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","changeFilter","items","createReducer","contactsActions","_","action","payload","isLoading","error","console","log","filter","combineReducers","store","configureStore","reducer","contacts","contactsReducer","addItem","deleteItem","CustomButton","styled","button","Button","onClick","text","Form","form","InputDiv","div","Input","input","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","handleChange","event","target","value","clearForm","onSubmit","e","preventDefault","randomID","uuidv4","id","Provider","size","type","onChange","pattern","title","required","autoComplete","getFilter","state","getVisibleContacts","getItems","normalizedFilter","toLowerCase","item","includes","axios","defaults","baseURL","contactsApi","a","get","data","List","ul","Item","li","CustomIconButton","IconButton","children","defaultProps","ContactList","useSelector","useEffect","message","map","FilterContainer","Filter","currentTarget","placeholder","ContainerCustom","Container","App","position","autoClose","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b6a6eb8.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit'\r\n\r\n// Это 3 синхронных actions, кот-е дойдут до редюсера\r\n\r\n// pending\r\nexport const fetchContactsRequest = createAction(\r\n  'contacts/fetchContactsRequest',\r\n)\r\n//fullfilled\r\nexport const fetchContactsSuccess = createAction(\r\n  'contacts/fetchContactsSuccess',\r\n)\r\n// reject\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError')\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter')\r\n","import { combineReducers, createReducer } from '@reduxjs/toolkit'\r\nimport * as contactsActions from './contactsActions'\r\n\r\nconst items = createReducer([], {\r\n  [contactsActions.fetchContactsSuccess]: (_, action) => action.payload,\r\n})\r\n\r\nconst isLoading = createReducer(false, {\r\n  [contactsActions.fetchContactsRequest]: () => true,\r\n  [contactsActions.fetchContactsSuccess]: () => false,\r\n  [contactsActions.fetchContactsError]: () => false,\r\n})\r\n\r\nconst error = createReducer(null, {\r\n  [contactsActions.fetchContactsError]: (_, action) => action.payload,\r\n  [contactsActions.fetchContactsRequest]: () => null,\r\n})\r\n\r\nconsole.log()\r\nconst filter = createReducer('', {\r\n  [contactsActions.changeFilter]: (_, action) => action.payload,\r\n})\r\n\r\nexport default combineReducers({\r\n  items,\r\n  isLoading,\r\n  error,\r\n  filter,\r\n})\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport contactsReducer from '../contacts/contactsReducer'\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n})\r\n\r\nexport default store\r\n// import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\r\n// import logger from 'redux-logger'\r\n// import {\r\n//   persistStore,\r\n//   persistReducer,\r\n//   FLUSH,\r\n//   REHYDRATE,\r\n//   PAUSE,\r\n//   PERSIST,\r\n//   PURGE,\r\n//   REGISTER,\r\n// } from 'redux-persist'\r\n// import storage from 'redux-persist/lib/storage'\r\n// import { rootReducer } from '../reducers/index'\r\n// import itemsReducer from '../slice/contacts'\r\n\r\n// const middleware = [\r\n//   ...getDefaultMiddleware({\r\n//     serializableCheck: {\r\n//       ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n//     },\r\n//   }),\r\n//   logger,\r\n// ]\r\n\r\n// const persistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n//   // blacklist: ['filter'],\r\n// }\r\n\r\n// // const rootReducer = combineReducers({\r\n// //   items: itemsReducer,\r\n// //   filter: filterReducer,\r\n// // })\r\n\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\n// // Пишем для себя, чтоб понять структуру\r\n// // const initialState = {\r\n// //   contacts: {\r\n// //     items: [],\r\n// //     filter: '',\r\n// //   },\r\n// // }\r\n\r\n// // Стандартная болванка reducer\r\n// // const reducer = (state = initialState, action) => {\r\n// //   console.log('log action in reducer >>', action)\r\n// //   return state\r\n// // }\r\n\r\n// // Старое с redux без toolkit\r\n// // const store = createStore(rootReducer, devToolsEnhancer())\r\n\r\n// const store = configureStore({\r\n//   reducer: persistedReducer,\r\n//   middleware,\r\n//   devTools: process.env.NODE_ENV !== 'production',\r\n// })\r\n\r\n// const persistor = persistStore(store)\r\n\r\n// export default { store, persistor }\r\n","// import { ITEM_ADD, ITEM_DELETE } from '../types/phoneBook-types'\r\nimport { createAction } from '@reduxjs/toolkit'\r\n\r\nexport const addItem = createAction('ITEM_ADD')\r\n// export const addItem = (formData) => ({\r\n//   type: ITEM_ADD,\r\n//   payload: formData,\r\n// })\r\n\r\nexport const deleteItem = createAction('ITEM_DELETE')\r\n// export const deleteItem = (id) => ({\r\n//   type: ITEM_DELETE,\r\n//   payload: id,\r\n// })\r\n\r\n// console.log(addItem(555))\r\n","import styled from '@emotion/styled'\r\nexport const CustomButton = styled.button`\r\n  font-weight: 400;\r\n  line-height: 1.33;\r\n    width: 197px;\r\n  background-color: orange;\r\n  margin-top: 15px;\r\n  margin-left: 29px;\r\n  border: none;\r\n  outline: none;\r\n  border-radius: 4px;\r\n  text-align: center;\r\n  box-shadow: 0px 1px 3px rgb(0 0 0 / 12%), 0px 1px 1px rgb(0 0 0 / 14%),\r\n    0px 2px 1px rgb(0 0 0 / 20%);\r\n    &:focus,\r\n  &:hover {\r\n    box-shadow: 2px 3px 17px 0px rgb(0 0 0 / 78%), -1px 0px 2px rgb(0 0 0 / 14%), 0px 2px 1px rgb(0 0 0 / 20%);\r\n    transition: box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1);\r\n`\r\n","import React from 'react'\r\nimport { CustomButton } from './Button.styled'\r\n\r\nfunction Button({ onClick, text }) {\r\n  return <CustomButton onClick={onClick}>{text}</CustomButton>\r\n}\r\n\r\nexport default Button\r\n","import styled from '@emotion/styled'\r\n\r\nexport const Form = styled.form`\r\n  padding: 15px;\r\n`\r\n\r\nexport const InputDiv = styled.div`\r\n  display: flex;\r\n`\r\nexport const Input = styled.input`\r\n  padding: 3px 10px;\r\n border: 2px solid rgba(33, 33, 33, 0.2);\r\n box-sizing: border-box;\r\n  border-radius: 4px;\r\n  &:focus,\r\n  &:hover {\r\n    border-color: #00adffa8;\r\n    outline: none;\r\n    transition: border-color 350ms cubic-bezier(0.4, 0, 0.2, 1);`\r\n","import { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { addItem } from '../../redux/actions/item'\r\n// import { addItem } from '../../redux/slice/contacts'\r\n// import { ToastContainer, toast } from 'react-toastify'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nimport { FcPhoneAndroid, FcBusinessContact } from 'react-icons/fc'\r\nimport { IconContext } from 'react-icons'\r\n\r\nimport Button from '../Button'\r\nimport { Form, InputDiv, Input } from './ContactForm.styled'\r\n\r\nconst ContactForm = () => {\r\n  const [name, setName] = useState('')\r\n  const [number, setNumber] = useState('')\r\n  const dispatch = useDispatch()\r\n\r\n  const handleChange = (event) => {\r\n    // console.log(event.target.name)\r\n\r\n    const { name, value } = event.target\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value)\r\n        break\r\n      case 'number':\r\n        setNumber(value)\r\n        break\r\n      default:\r\n        //можно вместо return написать, например, \"Неподдерживаемый тип поля\"\r\n        return\r\n    }\r\n  }\r\n\r\n  // const handleSubmit = (name, number) => {\r\n  //   const randomID = uuidv4()\r\n  //   const newContact = { id: randomID, name, number }\r\n  //   const findContact = contacts.find((contact) => contact.name.includes(name))\r\n\r\n  //   findContact\r\n  //     ? toast.warn(`${name} is already in contacts`)\r\n  //     : setContacts((prevState) => [...prevState, newContact])\r\n  // }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    const randomID = uuidv4()\r\n    const newContact = { id: randomID, name, number }\r\n    dispatch(addItem(newContact))\r\n    // const { name, number } = this.state\r\n    // const { onSubmit } = this.props\r\n    // onSubmit(name, number)\r\n    clearForm()\r\n  }\r\n\r\n  const clearForm = () => {\r\n    setName('')\r\n    setNumber('')\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Form onSubmit={handleSubmit}>\r\n        <label>\r\n          <h2>Name</h2>\r\n          <InputDiv>\r\n            <IconContext.Provider value={{ size: '23px' }}>\r\n              <FcBusinessContact />\r\n            </IconContext.Provider>\r\n            &nbsp;\r\n            <Input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={handleChange}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              autoComplete=\"off\"\r\n            />\r\n          </InputDiv>\r\n        </label>\r\n\r\n        <label>\r\n          <h2>Number</h2>\r\n          <InputDiv>\r\n            <IconContext.Provider value={{ size: '23px' }}>\r\n              <FcPhoneAndroid />\r\n            </IconContext.Provider>\r\n            &nbsp;\r\n            <Input\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={number}\r\n              onChange={handleChange}\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n              autoComplete=\"off\"\r\n            />\r\n          </InputDiv>\r\n        </label>\r\n        <Button text=\"Add contact\" />\r\n      </Form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ContactForm\r\n\r\n//------ the old class\r\n// export default class ContactForm extends Component {\r\n//   state = {\r\n//     name: '',\r\n//     number: '',\r\n//   }\r\n//   handleChange = ({ target }) => {\r\n//     const value = target.value\r\n//     const name = target.name\r\n//     this.setState({\r\n//       [name]: value,\r\n//     })\r\n//   }\r\n\r\n//   handleSubmit = (e) => {\r\n//     e.preventDefault()\r\n//     const { name, number } = this.state\r\n//     const { onSubmit } = this.props\r\n//     onSubmit(name, number)\r\n//     this.clearForm()\r\n//   }\r\n\r\n//   clearForm = () => {\r\n//     this.setState({ number: '', name: '' })\r\n//   }\r\n\r\n//   render() {\r\n//     const { number, name } = this.state\r\n//     return (\r\n//       <div>\r\n//         <Form onSubmit={this.handleSubmit}>\r\n//           <label>\r\n//             <h2>Name</h2>\r\n//             <InputDiv>\r\n//               <IconContext.Provider value={{ size: '23px' }}>\r\n//                 <FcBusinessContact />\r\n//               </IconContext.Provider>\r\n//               &nbsp;\r\n//               <Input\r\n//                 type=\"text\"\r\n//                 name=\"name\"\r\n//                 value={name}\r\n//                 onChange={this.handleChange}\r\n//                 pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//                 title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//                 required\r\n//                 autoComplete=\"off\"\r\n//               />\r\n//             </InputDiv>\r\n//           </label>\r\n\r\n//           <label>\r\n//             <h2>Number</h2>\r\n//             <InputDiv>\r\n//               <IconContext.Provider value={{ size: '23px' }}>\r\n//                 <FcPhoneAndroid />\r\n//               </IconContext.Provider>\r\n//               &nbsp;\r\n//               <Input\r\n//                 type=\"tel\"\r\n//                 name=\"number\"\r\n//                 value={number}\r\n//                 onChange={this.handleChange}\r\n//                 pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//                 title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//                 required\r\n//                 autoComplete=\"off\"\r\n//               />\r\n//             </InputDiv>\r\n//           </label>\r\n//           <Button text=\"Add contact\" />\r\n//         </Form>\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n","export const getItems = (state) => state.contacts.items\r\nexport const getFilter = (state) => state.contacts.filter\r\nexport const getLoading = (state) => state.contacts.isLoading\r\n// console.log('state >>', state)\r\n// console.log(' getFilter >>', getFilter())\r\n\r\nexport const getVisibleContacts = (state) => {\r\n  const filter = getFilter(state)\r\n  console.log('filter >>', filter)\r\n  const items = getItems(state)\r\n  console.log('items >>', items)\r\n  const normalizedFilter = filter.toLowerCase()\r\n  return items.filter((item) =>\r\n    item.name.toLowerCase().includes(normalizedFilter),\r\n  )\r\n}\r\n","import axios from 'axios'\r\n\r\naxios.defaults.baseURL = 'http://localhost:7777'\r\n\r\nexport const contactsApi = async () => {\r\n  const { data } = await axios.get('/contacts')\r\n  return data\r\n}\r\n","import * as contactsActions from './contactsActions.js'\r\nimport { contactsApi } from '../../services/contacts-api'\r\n\r\nconsole.log('contactsActions >>', contactsActions)\r\nconsole.log('contactsApi >>', contactsApi)\r\n\r\nexport const fetchContacts = () => async (dispatch) => {\r\n  // вызов action creator. Ничего не передаем, т.к. это будет true или false\r\n  dispatch(contactsActions.fetchContactsRequest())\r\n\r\n  const contacts = contactsApi()\r\n  dispatch(contactsActions.fetchContactsSuccess(contacts))\r\n\r\n  try {\r\n    const contacts = contactsApi()\r\n    dispatch(contactsActions.fetchContactsSuccess(contacts))\r\n  } catch (error) {\r\n    dispatch(contactsActions.fetchContactsError(error.message))\r\n  }\r\n}\r\n\r\n// без async await: fetch().then().catch  По результату then() вызываем success, по результату catch() - error\r\n","import styled from '@emotion/styled'\r\n\r\nexport const List = styled.ul`\r\n  border-radius: 4px;\r\n  padding: 24px;\r\n  //   background-color: #7c7c7c;\r\n  //   color: #fff;\r\n`\r\nexport const Item = styled.li`\r\n  display: flex;\r\n  padding-bottom: 10px;\r\n  justify-content: space-between;\r\n  align-items: baseline;\r\n  font-weight: normal;\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n`\r\n","import styled from '@emotion/styled'\r\n\r\nexport const CustomIconButton = styled.button`\r\n  background-color: transparent;\r\n  border: none;\r\ntransition: 100ms;\r\n    &:focus,\r\n  &:hover {\r\n\r\n    transform: scale(1.1);\r\n    color: red;\r\n`\r\n","import React from 'react'\r\nimport { CustomIconButton } from './IconButton.styled'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction IconButton({ children, onClick }) {\r\n  return (\r\n    <CustomIconButton type=\"button\" onClick={onClick}>\r\n      {children}\r\n    </CustomIconButton>\r\n  )\r\n}\r\n\r\nIconButton.defaultProps = {\r\n  onClick: () => null,\r\n  children: null,\r\n}\r\n\r\nIconButton.propTypes = {\r\n  children: PropTypes.node,\r\n  onClick: PropTypes.func,\r\n}\r\n\r\nexport default IconButton\r\n","// import PropTypes from 'prop-types'\r\nimport { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { RiDeleteBin6Fill } from 'react-icons/ri'\r\nimport { IconContext } from 'react-icons'\r\n\r\n// import { getVisibleContacts } from '../../redux/selectors/contacts-selectors'\r\nimport { deleteItem } from '../../redux/actions/item'\r\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors'\r\nimport { fetchContacts } from '../../redux/contacts/contactsOperations'\r\n\r\nimport { List, Item } from './ContactList.styled'\r\nimport IconButton from '../IconButton'\r\n\r\n// const getVisibleContacts = () => {\r\n//     const normalizedFilter = filter.toLowerCase()\r\n//     return contacts.filter((contact) =>\r\n//       contact.name.toLowerCase().includes(normalizedFilter),\r\n//     )\r\n//   }\r\n\r\n// const getItems = (state) => state.items\r\n// const getFilter = (state) => state.filter\r\n// const getVisibleContacts = (state) => {\r\n//   const filter = getFilter(state)\r\n//   const items = getItems(state)\r\n//   const normalizedFilter = filter.toLowerCase()\r\n//   return items.filter((contact) =>\r\n//     contact.name.toLowerCase().includes(normalizedFilter),\r\n//   )\r\n// }\r\n\r\n// const deleteContact = (contactId) => {\r\n//     setContacts((prevState) =>\r\n//       prevState.filter((contact) => contact.id !== contactId),\r\n//     )\r\n//   }\r\n\r\nexport default function ContactList() {\r\n  const dispatch = useDispatch()\r\n  // console.log('items >>', items)\r\n  const contacts = useSelector(getVisibleContacts)\r\n  const DeleteContact = (id) => {\r\n    dispatch(deleteItem(id))\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContacts())\r\n  }, [dispatch])\r\n\r\n  console.log('contacts >>', contacts)\r\n  return (\r\n    <List>\r\n      {contacts.map((item) => (\r\n        <Item key={item.id}>\r\n          {item.name}: {item.number}\r\n          <IconButton onClick={() => DeleteContact(item.id)}>\r\n            <IconContext.Provider value={{ size: '23px' }}>\r\n              <RiDeleteBin6Fill />\r\n            </IconContext.Provider>\r\n          </IconButton>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  )\r\n}\r\n\r\n// ContactList.propTypes = {\r\n//   // contacts: PropTypes.array.isRequired,\r\n//   // onClick: PropTypes.func.isRequired,\r\n// }\r\n","import styled from '@emotion/styled'\r\n\r\nexport const FilterContainer = styled.div`\r\n  padding: 15px;\r\n`\r\n","// import PropTypes from 'prop-types'\r\n\r\nimport React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { IconContext } from 'react-icons'\r\nimport { FcSearch } from 'react-icons/fc'\r\n\r\nimport { InputDiv } from '../ContactForm/ContactForm.styled'\r\nimport { Input } from '../ContactForm/ContactForm.styled'\r\nimport { FilterContainer } from './Filter.styled'\r\n// import { getFilter } from '../../redux/selectors/contacts-selectors'\r\n// import { filterItem } from '../../redux/actions/filter'\r\nimport { getFilter } from '../../redux/contacts/contacts-selectors'\r\nimport { changeFilter } from '../../redux/contacts/contactsActions'\r\n\r\nexport default function Filter({ onChange }) {\r\n  const dispatch = useDispatch()\r\n  const filter = useSelector(getFilter)\r\n  return (\r\n    <label>\r\n      <FilterContainer>\r\n        <h3>Find contacts by name</h3>\r\n        <InputDiv>\r\n          <IconContext.Provider value={{ size: '23px' }}>\r\n            <FcSearch />\r\n          </IconContext.Provider>\r\n          &nbsp;\r\n          <Input\r\n            type=\"text\"\r\n            name=\"filter\"\r\n            value={filter}\r\n            onChange={(e) => dispatch(changeFilter(e.currentTarget.value))}\r\n            placeholder=\"Search contact\"\r\n            autoComplete=\"off\"\r\n          />\r\n        </InputDiv>\r\n      </FilterContainer>\r\n    </label>\r\n  )\r\n}\r\n// Filter.propTypes = {\r\n//   onChange: PropTypes.func.isRequired,\r\n//   filter: PropTypes.string.isRequired,\r\n// }\r\n","import styled from '@emotion/styled'\r\n\r\nexport const ContainerCustom = styled.div`\r\n  margin: 0 auto;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n  background-color: rgb(0 0 0 / 12%);\r\n  background-image: linear-gradient(28deg, #a8ff36, transparent);\r\n  border: 2px solid #4a4a4a;\r\n  border-radius: 5px;\r\n  max-width: 400px;\r\n`\r\n","import { ContainerCustom } from './Container.styled'\r\n\r\nfunction Container({ children }) {\r\n  return <ContainerCustom>{children}</ContainerCustom>\r\n}\r\n\r\nexport default Container\r\n","// import { useState, useEffect } from 'react'\r\n// import { connect } from 'react-redux'\r\n// import * as actions from './redux/actions/explain-actions'\r\nimport { ToastContainer } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\n\r\nimport ContactForm from './components/ContactForm'\r\nimport ContactList from './components/ContactList'\r\nimport Filter from './components/Filter'\r\nimport Container from './components/Container'\r\n// import { v4 as uuidv4 } from 'uuid'\r\n\r\nconst App = () => {\r\n  // const [contacts, setContacts] = useState(\r\n  //   () => JSON.parse(window.localStorage.getItem('contacts')) ?? [],\r\n  // )\r\n  // // const [filter, setFilter] = useState('')\r\n\r\n  // useEffect(() => {\r\n  //   window.localStorage.setItem('contacts', JSON.stringify(contacts))\r\n  // }, [contacts])\r\n\r\n  // const handleChange = ({ currentTarget }) => {\r\n  //   const value = currentTarget.value\r\n  //   const name = currentTarget.name\r\n\r\n  //   switch (name) {\r\n  //     case 'contacts':\r\n  //       setContacts(value)\r\n  //       break\r\n  //     case 'filter':\r\n  //       setFilter(value)\r\n  //       break\r\n  //     default:\r\n  //       return\r\n  //   }\r\n  // }\r\n\r\n  // const handleSubmit = (name, number) => {\r\n  //   const randomID = uuidv4()\r\n  //   const newContact = { id: randomID, name, number }\r\n  //   const findContact = contacts.find((contact) => contact.name.includes(name))\r\n\r\n  //   findContact\r\n  //     ? toast.warn(`${name} is already in contacts`)\r\n  //     : setContacts((prevState) => [...prevState, newContact])\r\n  // }\r\n\r\n  // const getVisibleContacts = () => {\r\n  //   const normalizedFilter = filter.toLowerCase()\r\n  //   return contacts.filter((contact) =>\r\n  //     contact.name.toLowerCase().includes(normalizedFilter),\r\n  //   )\r\n  // }\r\n\r\n  // const deleteContact = (contactId) => {\r\n  //   setContacts((prevState) =>\r\n  //     prevState.filter((contact) => contact.id !== contactId),\r\n  //   )\r\n  // }\r\n  // console.log('getVisibleContacts >>', getVisibleContacts())\r\n\r\n  return (\r\n    <Container>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n      <ToastContainer position=\"top-center\" autoClose={2000} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default App\r\n\r\n//-----the old class\r\n// export default class App extends Component {\r\n//   state = {\r\n//     contacts: [],\r\n//     filter: '',\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     const contacts = localStorage.getItem('contacts')\r\n//     const parsedContatcs = JSON.parse(contacts)\r\n//     if (parsedContatcs) {\r\n//       this.setState({ contacts: parsedContatcs })\r\n//     }\r\n//   }\r\n\r\n//   componentDidUpdate(prevProps, prevState) {\r\n//     if (this.state.contacts !== prevState.contacts) {\r\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts))\r\n//     }\r\n//   }\r\n\r\n//   handleChange = ({ currentTarget }) => {\r\n//     const value = currentTarget.value\r\n//     const name = currentTarget.name\r\n\r\n//     this.setState({\r\n//       [name]: value,\r\n//     })\r\n//   }\r\n\r\n//   handleSubmit = (name, number) => {\r\n//     const randomID = uuidv4()\r\n//     const newContact = { id: randomID, name, number }\r\n\r\n//     const findContact = this.state.contacts.find((contact) =>\r\n//       contact.name.includes(name),\r\n//     )\r\n\r\n//     findContact\r\n//       ? toast.warn(`${name} is already in contacts`)\r\n//       : // alert(`${name} is already in contacts`)\r\n//         this.setState((prevState) => ({\r\n//           contacts: [...prevState.contacts, newContact],\r\n//         }))\r\n//   }\r\n\r\n//   getVisibleContacts = () => {\r\n//     const { filter, contacts } = this.state\r\n//     const normalizedFilter = filter.toLowerCase()\r\n//     return contacts.filter((contact) =>\r\n//       contact.name.toLowerCase().includes(normalizedFilter),\r\n//     )\r\n//   }\r\n\r\n//   deleteContact = (contactId) => {\r\n//     this.setState((prevState) => ({\r\n//       contacts: prevState.contacts.filter(\r\n//         (contact) => contact.id !== contactId,\r\n//       ),\r\n//     }))\r\n//   }\r\n\r\n//   render() {\r\n//     const { filter } = this.state\r\n//     const visibleContacts = this.getVisibleContacts()\r\n//     return (\r\n//       <Container>\r\n//         <h1>Phonebook</h1>\r\n//         <ContactForm onSubmit={this.handleSubmit} />\r\n\r\n//         <h2>Contacts</h2>\r\n//         <Filter onChange={this.handleChange} filter={filter} />\r\n//         <ContactList contacts={visibleContacts} onClick={this.deleteContact} />\r\n//         <ToastContainer position=\"top-center\" autoClose={2000} />\r\n//       </Container>\r\n//     )\r\n//   }\r\n// }\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport store from './redux/store/phoneBook-store'\n\n// import { myAction } from './redux/actions/phoneBook-actions'\nimport { Provider } from 'react-redux'\n// import { PersistGate } from 'redux-persist/integration/react'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// // curried functions\n// const greeting = function (greeting) {\n//   return function (name) {\n//     console.log(`${greeting}, ${name}`)\n//   }\n// }\n\n// const fullGreeting = greeting('Nice to meet you')\n// fullGreeting('Adam')\n// fullGreeting('Annet')\n// greeting('Nice to meet you')('Alice')\n\n// const curriedGreeting = function (greeting) {\n//   return function (name) {\n//     console.log(`${greeting}, ${name}`)\n//   }\n// }\n\n// const fullCurriedGreeting = curriedGreeting('Hello, Mr.')\n// fullCurriedGreeting('John')\n// // console.log(fullCurriedGreeting())\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}