{"version":3,"sources":["redux/contacts/contactsActions.js","services/contacts-api.js","redux/contacts/contactsOperations.js","redux/contacts/contactsReducer.js","redux/store/phoneBook-store.js","redux/contacts/contacts-selectors.js","components/Button/Button.styled.jsx","components/Button/Button.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/IconButton/IconButton.styled.jsx","components/IconButton/IconButton.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Container/Container.styled.jsx","components/Container/Container.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["changeFilter","createAction","axios","defaults","baseURL","getContact","a","get","data","postContact","contact","post","deleteContact","id","delete","fetchContacts","createAsyncThunk","contacts","addItem","item","deleteItem","items","createReducer","fulfilled","_","action","payload","state","filter","isLoading","pending","rejected","error","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","contactsReducer","devTools","process","getItems","getFilter","getVisibleContacts","console","log","normalizedFilter","toLowerCase","name","includes","CustomButton","styled","button","Button","onClick","text","Form","form","InputDiv","div","Input","input","ContactForm","useState","setName","number","setNumber","dispatch","useDispatch","stateContacts","useSelector","handleChange","event","currentTarget","value","clearForm","onSubmit","e","preventDefault","find","toast","warn","success","transition","Zoom","Provider","size","type","onChange","pattern","title","required","autoComplete","List","ul","Item","li","CustomIconButton","IconButton","children","defaultProps","ContactList","useEffect","map","FilterContainer","Filter","placeholder","ContainerCustom","Container","App","position","autoClose","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ce21f55.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit'\n\n// Это 3 синхронных actions, кот-е дойдут до редюсера\n\n//\n// pending\n// export const fetchContactsRequest = createAction(\n//   'contacts/fetchContactsRequest',\n// )\n// //fullfilled\n// export const fetchContactsSuccess = createAction(\n//   'contacts/fetchContactsSuccess',\n// )\n// // reject\n// export const fetchContactsError = createAction('contacts/fetchContactsError')\n\nexport const changeFilter = createAction('contacts/changeFilter')\n\n// export const addContact = createAction('contacts/add')\n\n// export const deleteContact = createAction('contacts/delete')\n","import axios from 'axios'\n\naxios.defaults.baseURL = 'http://localhost:7777'\n\nexport const getContact = async () => {\n  const { data } = await axios.get('/contacts')\n  return data\n}\n\nexport const postContact = async (contact) => {\n  const { data } = await axios.post('/contacts', contact)\n  return data\n}\n\nexport const deleteContact = async (id) => {\n  await axios.delete(`/contacts/${id}`)\n  return id\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n// import * as contactsActions from './contactsActions.js'\nimport {\n  getContact,\n  postContact,\n  deleteContact,\n} from '../../services/contacts-api'\n\nexport const fetchContacts = createAsyncThunk(\n  'contacts/fetchContacts',\n  async () => {\n    const contacts = await getContact()\n    return contacts\n  },\n)\n\nexport const addItem = createAsyncThunk('contacts/add', async (item) => {\n  const contact = await postContact(item)\n  return contact\n})\n\nexport const deleteItem = createAsyncThunk('contacts/delete', async (id) => {\n  const contact = await deleteContact(id)\n  return contact\n})\n\n// Операция без createAsyncThunk\n// export const fetchContacts = () => async (dispatch) => {\n//   // вызов action creator. Ничего не передаем, т.к. это будет true или false\n//   dispatch(contactsActions.fetchContactsRequest())\n\n//   try {\n//     const contacts = await getContact()\n//     dispatch(contactsActions.fetchContactsSuccess(contacts))\n//   } catch (error) {\n//     dispatch(contactsActions.fetchContactsError(error.message))\n//   }\n// }\n\n//\n// export const postContacts = () => (dispatch) => {\n//   dispatch(contactsActions.fetchContactsRequest())\n\n//   const contacts = addContact()\n//   dispatch(contactsActions.fetchContactsSuccess(contacts))\n\n//   try {\n//     const contacts = addContact()\n//     dispatch(contactsActions.fetchContactsSuccess(contacts))\n//   } catch (error) {\n//     dispatch(contactsActions.fetchContactsError(error.message))\n//   }\n// }\n\n// без async await: fetch().then().catch  По результату then() вызываем success, по результату catch() - error\n","import { combineReducers, createReducer } from '@reduxjs/toolkit'\n// import * as contactsActions from './contactsActions'\nimport { changeFilter } from './contactsActions'\nimport { fetchContacts, addItem, deleteItem } from './contactsOperations'\n\nconst items = createReducer([], {\n  [fetchContacts.fulfilled]: (_, action) => action.payload,\n  [addItem.fulfilled]: (state, { payload }) => [...state, payload],\n  [deleteItem.fulfilled]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n})\n\nconst isLoading = createReducer(false, {\n  [fetchContacts.pending]: () => true,\n  [fetchContacts.fulfilled]: () => false,\n  [fetchContacts.rejected]: () => false,\n})\n\nconst error = createReducer(null, {\n  [fetchContacts.rejected]: (_, action) => action.payload,\n  [fetchContacts.pending]: () => null,\n})\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, action) => action.payload,\n})\n\n// С экшнами без createAsyncThunk\n// const items = createReducer([], {\n//   [fetchContacts.fetchContactsSuccess]: (_, action) => action.payload,\n// })\n\n// const isLoading = createReducer(false, {\n//   [contactsActions.fetchContactsRequest]: () => true,\n//   [contactsActions.fetchContactsSuccess]: () => false,\n//   [contactsActions.fetchContactsError]: () => false,\n// })\n\n// const error = createReducer(null, {\n//   [contactsActions.fetchContactsError]: (_, action) => action.payload,\n//   [contactsActions.fetchContactsRequest]: () => null,\n// })\n\n// const filter = createReducer('', {\n//   [contactsActions.changeFilter]: (_, action) => action.payload,\n// })\n//=======\n\nexport default combineReducers({\n  items,\n  isLoading,\n  error,\n  filter,\n})\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport logger from 'redux-logger'\nimport contactsReducer from '../contacts/contactsReducer'\n\nconst middleware = [...getDefaultMiddleware(), logger]\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n})\n\nexport default store\n// import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\n// import logger from 'redux-logger'\n// import {\n//   persistStore,\n//   persistReducer,\n//   FLUSH,\n//   REHYDRATE,\n//   PAUSE,\n//   PERSIST,\n//   PURGE,\n//   REGISTER,\n// } from 'redux-persist'\n// import storage from 'redux-persist/lib/storage'\n// import { rootReducer } from '../reducers/index'\n// import itemsReducer from '../slice/contacts'\n\n// const middleware = [\n//   ...getDefaultMiddleware({\n//     serializableCheck: {\n//       ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n//     },\n//   }),\n//   logger,\n// ]\n\n// const persistConfig = {\n//   key: 'contacts',\n//   storage,\n//   // blacklist: ['filter'],\n// }\n\n// // const rootReducer = combineReducers({\n// //   items: itemsReducer,\n// //   filter: filterReducer,\n// // })\n\n// const persistedReducer = persistReducer(persistConfig, rootReducer)\n\n// // Пишем для себя, чтоб понять структуру\n// // const initialState = {\n// //   contacts: {\n// //     items: [],\n// //     filter: '',\n// //   },\n// // }\n\n// // Стандартная болванка reducer\n// // const reducer = (state = initialState, action) => {\n// //   console.log('log action in reducer >>', action)\n// //   return state\n// // }\n\n// // Старое с redux без toolkit\n// // const store = createStore(rootReducer, devToolsEnhancer())\n\n// const store = configureStore({\n//   reducer: persistedReducer,\n//   middleware,\n//   devTools: process.env.NODE_ENV !== 'production',\n// })\n\n// const persistor = persistStore(store)\n\n// export default { store, persistor }\n","export const getItems = (state) => state.contacts.items;\nexport const getFilter = (state) => state.contacts.filter;\nexport const getLoading = (state) => state.contacts.isLoading;\n// console.log('state >>', state)\n// console.log(' getFilter >>', getFilter())\n\nexport const getVisibleContacts = (state) => {\n  const filter = getFilter(state);\n  console.log(\"filter >>\", filter);\n  const items = getItems(state);\n  console.log(\"items >>\", items);\n  const normalizedFilter = filter.toLowerCase();\n  return items.filter((item) =>\n    item.name.toLowerCase().includes(normalizedFilter)\n  );\n};\n","import styled from '@emotion/styled'\nexport const CustomButton = styled.button`\n  font-weight: 400;\n  line-height: 1.33;\n    width: 197px;\n  background-color: orange;\n  margin-top: 15px;\n  margin-left: 29px;\n  border: none;\n  outline: none;\n  border-radius: 4px;\n  text-align: center;\n  box-shadow: 0px 1px 3px rgb(0 0 0 / 12%), 0px 1px 1px rgb(0 0 0 / 14%),\n    0px 2px 1px rgb(0 0 0 / 20%);\n    &:focus,\n  &:hover {\n    box-shadow: 2px 3px 17px 0px rgb(0 0 0 / 78%), -1px 0px 2px rgb(0 0 0 / 14%), 0px 2px 1px rgb(0 0 0 / 20%);\n    transition: box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1);\n`\n","import React from 'react'\nimport { CustomButton } from './Button.styled'\n\nfunction Button({ onClick, text }) {\n  return <CustomButton onClick={onClick}>{text}</CustomButton>\n}\n\nexport default Button\n","import styled from '@emotion/styled'\n\nexport const Form = styled.form`\n  padding: 15px;\n`\n\nexport const InputDiv = styled.div`\n  display: flex;\n`\nexport const Input = styled.input`\n  padding: 3px 10px;\n border: 2px solid rgba(33, 33, 33, 0.2);\n box-sizing: border-box;\n  border-radius: 4px;\n  &:focus,\n  &:hover {\n    border-color: #00adffa8;\n    outline: none;\n    transition: border-color 350ms cubic-bezier(0.4, 0, 0.2, 1);`\n","import { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n// import { addItem } from '../../redux/actions/item'\nimport { addItem } from '../../redux/contacts/contactsOperations'\nimport { getItems } from '../../redux/contacts/contacts-selectors'\n// import { addItem } from '../../redux/slice/contacts'\nimport { toast, Zoom } from 'react-toastify'\n// import { v4 as uuidv4 } from 'uuid'\n\nimport { FcPhoneAndroid, FcBusinessContact } from 'react-icons/fc'\nimport { IconContext } from 'react-icons'\n\nimport Button from '../Button'\nimport { Form, InputDiv, Input } from './ContactForm.styled'\n\nconst ContactForm = () => {\n  const [name, setName] = useState('')\n  const [number, setNumber] = useState('')\n  const dispatch = useDispatch()\n  const stateContacts = useSelector(getItems)\n  console.log('stateContacts >>', stateContacts)\n\n  const handleChange = (event) => {\n    const { name, value } = event.currentTarget\n\n    switch (name) {\n      case 'name':\n        setName(value)\n        break\n      case 'number':\n        setNumber(value)\n        break\n      default:\n        //можно вместо return написать, например, \"Неподдерживаемый тип поля\"\n        return\n    }\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n\n    const findContact = stateContacts.find((contact) =>\n      contact.name.includes(name),\n    )\n    if (findContact) {\n      toast.warn(`${name} is already in contacts`)\n      return\n    }\n    const newContact = { name, number }\n    dispatch(addItem(newContact)) &&\n      toast.success(`\"${name}\" added to contacts `, {\n        transition: Zoom,\n      })\n    clearForm()\n  }\n\n  const clearForm = () => {\n    setName('')\n    setNumber('')\n  }\n\n  return (\n    <div>\n      <Form onSubmit={handleSubmit}>\n        <label>\n          <h2>Name</h2>\n          <InputDiv>\n            <IconContext.Provider value={{ size: '23px' }}>\n              <FcBusinessContact />\n            </IconContext.Provider>\n            &nbsp;\n            <Input\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={handleChange}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n              autoComplete=\"off\"\n            />\n          </InputDiv>\n        </label>\n\n        <label>\n          <h2>Number</h2>\n          <InputDiv>\n            <IconContext.Provider value={{ size: '23px' }}>\n              <FcPhoneAndroid />\n            </IconContext.Provider>\n            &nbsp;\n            <Input\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              onChange={handleChange}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n              autoComplete=\"off\"\n            />\n          </InputDiv>\n        </label>\n        <Button text=\"Add contact\" />\n      </Form>\n    </div>\n  )\n}\n\nexport default ContactForm\n","import styled from '@emotion/styled'\n\nexport const List = styled.ul`\n  border-radius: 4px;\n  padding: 24px;\n  //   background-color: #7c7c7c;\n  //   color: #fff;\n`\nexport const Item = styled.li`\n  display: flex;\n  padding-bottom: 10px;\n  justify-content: space-between;\n  align-items: baseline;\n  font-weight: normal;\n  font-size: 16px;\n  line-height: 24px;\n`\n","import styled from '@emotion/styled'\n\nexport const CustomIconButton = styled.button`\n  background-color: transparent;\n  border: none;\ntransition: 100ms;\n    &:focus,\n  &:hover {\n\n    transform: scale(1.1);\n    color: red;\n`\n","import React from 'react'\nimport { CustomIconButton } from './IconButton.styled'\nimport PropTypes from 'prop-types'\n\nfunction IconButton({ children, onClick }) {\n  return (\n    <CustomIconButton type=\"button\" onClick={onClick}>\n      {children}\n    </CustomIconButton>\n  )\n}\n\nIconButton.defaultProps = {\n  onClick: () => null,\n  children: null,\n}\n\nIconButton.propTypes = {\n  children: PropTypes.node,\n  onClick: PropTypes.func,\n}\n\nexport default IconButton\n","// import PropTypes from 'prop-types'\nimport { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { RiDeleteBin6Fill } from 'react-icons/ri'\nimport { IconContext } from 'react-icons'\n\n// import { getVisibleContacts } from '../../redux/selectors/contacts-selectors'\n// import { deleteItem } from '../../redux/actions/item'\nimport { deleteItem } from '../../redux/contacts/contactsOperations'\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors'\nimport { fetchContacts } from '../../redux/contacts/contactsOperations'\n\nimport { List, Item } from './ContactList.styled'\nimport IconButton from '../IconButton'\n\nexport default function ContactList() {\n  const dispatch = useDispatch()\n  // console.log('items >>', items)\n  const contacts = useSelector(getVisibleContacts)\n  const deleteContact = (id) => {\n    dispatch(deleteItem(id))\n  }\n\n  useEffect(() => {\n    dispatch(fetchContacts())\n  }, [dispatch])\n\n  console.log('contacts >>', contacts)\n  return (\n    <List>\n      {contacts.map((item) => (\n        <Item key={item.id}>\n          {item.name}: {item.number}\n          <IconButton onClick={() => deleteContact(item.id)}>\n            <IconContext.Provider value={{ size: '23px' }}>\n              <RiDeleteBin6Fill />\n            </IconContext.Provider>\n          </IconButton>\n        </Item>\n      ))}\n    </List>\n  )\n}\n\n// ContactList.propTypes = {\n//   // contacts: PropTypes.array.isRequired,\n//   // onClick: PropTypes.func.isRequired,\n// }\n","import styled from '@emotion/styled'\n\nexport const FilterContainer = styled.div`\n  padding: 15px;\n`\n","// import PropTypes from 'prop-types'\n\nimport React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { IconContext } from 'react-icons'\nimport { FcSearch } from 'react-icons/fc'\n\nimport { InputDiv } from '../ContactForm/ContactForm.styled'\nimport { Input } from '../ContactForm/ContactForm.styled'\nimport { FilterContainer } from './Filter.styled'\n// import { getFilter } from '../../redux/selectors/contacts-selectors'\n// import { filterItem } from '../../redux/actions/filter'\nimport { getFilter } from '../../redux/contacts/contacts-selectors'\nimport { changeFilter } from '../../redux/contacts/contactsActions'\n\nexport default function Filter({ onChange }) {\n  const dispatch = useDispatch()\n  const filter = useSelector(getFilter)\n  return (\n    <label>\n      <FilterContainer>\n        <h3>Find contacts by name</h3>\n        <InputDiv>\n          <IconContext.Provider value={{ size: '23px' }}>\n            <FcSearch />\n          </IconContext.Provider>\n          &nbsp;\n          <Input\n            type=\"text\"\n            name=\"filter\"\n            value={filter}\n            onChange={(e) => dispatch(changeFilter(e.currentTarget.value))}\n            placeholder=\"Search contact\"\n            autoComplete=\"off\"\n          />\n        </InputDiv>\n      </FilterContainer>\n    </label>\n  )\n}\n// Filter.propTypes = {\n//   onChange: PropTypes.func.isRequired,\n//   filter: PropTypes.string.isRequired,\n// }\n","import styled from '@emotion/styled'\n\nexport const ContainerCustom = styled.div`\n  margin: 0 auto;\n  padding-left: 20px;\n  padding-right: 20px;\n  background-color: rgb(0 0 0 / 12%);\n  background-image: linear-gradient(28deg, #a8ff36, transparent);\n  border: 2px solid #4a4a4a;\n  border-radius: 5px;\n  max-width: 400px;\n`\n","import { ContainerCustom } from './Container.styled'\n\nfunction Container({ children }) {\n  return <ContainerCustom>{children}</ContainerCustom>\n}\n\nexport default Container\n","// import { useState, useEffect } from 'react'\n// import { connect } from 'react-redux'\n// import * as actions from './redux/actions/explain-actions'\nimport { ToastContainer } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\n\nimport ContactForm from './components/ContactForm'\nimport ContactList from './components/ContactList'\nimport Filter from './components/Filter'\nimport Container from './components/Container'\n// import { v4 as uuidv4 } from 'uuid'\n\nconst App = () => {\n  // const [contacts, setContacts] = useState(\n  //   () => JSON.parse(window.localStorage.getItem('contacts')) ?? [],\n  // )\n  // // const [filter, setFilter] = useState('')\n\n  // useEffect(() => {\n  //   window.localStorage.setItem('contacts', JSON.stringify(contacts))\n  // }, [contacts])\n\n  // const handleChange = ({ currentTarget }) => {\n  //   const value = currentTarget.value\n  //   const name = currentTarget.name\n\n  //   switch (name) {\n  //     case 'contacts':\n  //       setContacts(value)\n  //       break\n  //     case 'filter':\n  //       setFilter(value)\n  //       break\n  //     default:\n  //       return\n  //   }\n  // }\n\n  // const handleSubmit = (name, number) => {\n  //   const randomID = uuidv4()\n  //   const newContact = { id: randomID, name, number }\n  //   const findContact = contacts.find((contact) => contact.name.includes(name))\n\n  //   findContact\n  //     ? toast.warn(`${name} is already in contacts`)\n  //     : setContacts((prevState) => [...prevState, newContact])\n  // }\n\n  // const getVisibleContacts = () => {\n  //   const normalizedFilter = filter.toLowerCase()\n  //   return contacts.filter((contact) =>\n  //     contact.name.toLowerCase().includes(normalizedFilter),\n  //   )\n  // }\n\n  // const deleteContact = (contactId) => {\n  //   setContacts((prevState) =>\n  //     prevState.filter((contact) => contact.id !== contactId),\n  //   )\n  // }\n  // console.log('getVisibleContacts >>', getVisibleContacts())\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n      <ToastContainer position=\"top-center\" autoClose={2000} />\n    </Container>\n  )\n}\n\nexport default App\n\n//-----the old class\n// export default class App extends Component {\n//   state = {\n//     contacts: [],\n//     filter: '',\n//   }\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts')\n//     const parsedContatcs = JSON.parse(contacts)\n//     if (parsedContatcs) {\n//       this.setState({ contacts: parsedContatcs })\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.contacts) {\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts))\n//     }\n//   }\n\n//   handleChange = ({ currentTarget }) => {\n//     const value = currentTarget.value\n//     const name = currentTarget.name\n\n//     this.setState({\n//       [name]: value,\n//     })\n//   }\n\n//   handleSubmit = (name, number) => {\n//     const randomID = uuidv4()\n//     const newContact = { id: randomID, name, number }\n\n//     const findContact = this.state.contacts.find((contact) =>\n//       contact.name.includes(name),\n//     )\n\n//     findContact\n//       ? toast.warn(`${name} is already in contacts`)\n//       : // alert(`${name} is already in contacts`)\n//         this.setState((prevState) => ({\n//           contacts: [...prevState.contacts, newContact],\n//         }))\n//   }\n\n//   getVisibleContacts = () => {\n//     const { filter, contacts } = this.state\n//     const normalizedFilter = filter.toLowerCase()\n//     return contacts.filter((contact) =>\n//       contact.name.toLowerCase().includes(normalizedFilter),\n//     )\n//   }\n\n//   deleteContact = (contactId) => {\n//     this.setState((prevState) => ({\n//       contacts: prevState.contacts.filter(\n//         (contact) => contact.id !== contactId,\n//       ),\n//     }))\n//   }\n\n//   render() {\n//     const { filter } = this.state\n//     const visibleContacts = this.getVisibleContacts()\n//     return (\n//       <Container>\n//         <h1>Phonebook</h1>\n//         <ContactForm onSubmit={this.handleSubmit} />\n\n//         <h2>Contacts</h2>\n//         <Filter onChange={this.handleChange} filter={filter} />\n//         <ContactList contacts={visibleContacts} onClick={this.deleteContact} />\n//         <ToastContainer position=\"top-center\" autoClose={2000} />\n//       </Container>\n//     )\n//   }\n// }\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport store from './redux/store/phoneBook-store'\n\n// import { myAction } from './redux/actions/phoneBook-actions'\nimport { Provider } from 'react-redux'\n// import { PersistGate } from 'redux-persist/integration/react'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// // curried functions\n// const greeting = function (greeting) {\n//   return function (name) {\n//     console.log(`${greeting}, ${name}`)\n//   }\n// }\n\n// const fullGreeting = greeting('Nice to meet you')\n// fullGreeting('Adam')\n// fullGreeting('Annet')\n// greeting('Nice to meet you')('Alice')\n\n// const curriedGreeting = function (greeting) {\n//   return function (name) {\n//     console.log(`${greeting}, ${name}`)\n//   }\n// }\n\n// const fullCurriedGreeting = curriedGreeting('Hello, Mr.')\n// fullCurriedGreeting('John')\n// // console.log(fullCurriedGreeting())\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}